name: JS 反混淆（本地安装工具，稳定无路径坑）
on:
  workflow_dispatch:  # 仅手动触发，避免自动干扰

jobs:
  deobfuscate-js:
    runs-on: ubuntu-latest
    steps:
      # 步骤1：拉取仓库代码（获取待反混淆的 JS 文件）
      - name: 拉取仓库代码
        uses: actions/checkout@v4

      # 步骤2：安装 Node.js（工具依赖，无需提前有 NPM 项目）
      - name: 安装 Node.js（LTS 稳定版）
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # 兼容工具所有版本
          cache: 'npm'  # 缓存本地依赖，加速后续安装

      # 步骤3：初始化 NPM 项目（自动生成 package.json，为本地装工具用）
      - name: 初始化 NPM 项目（无需手动操作）
        run: npm init -y  # -y 自动确认所有选项，1秒生成 package.json

      # 步骤4：本地安装反混淆工具（装到项目 node_modules，不全局）
      - name: 本地安装 javascript-deobfuscator
        run: npm install javascript-deobfuscator  # 无 --global，纯本地安装

      # 步骤5：执行反混淆（用本地命令，100% 能找到）
      - name: 本地执行 JS 反混淆
        run: |
          # 🔔 必须修改：替换为你仓库中待反混淆的 JS 文件路径
          INPUT_FILE="./obfuscated.js"  
          # 🔔 可选修改：自定义反混淆后的输出文件路径
          OUTPUT_FILE="./obfuscated.cleaned.js"  

          # 1. 先检查输入文件是否存在（避免路径写错）
          if [ ! -f "$INPUT_FILE" ]; then
            echo "❌ 错误：输入文件 $INPUT_FILE 不存在！请检查路径"
            exit 1
          fi
          echo "✅ 找到输入文件：$INPUT_FILE"

          # 2. 调用本地工具（路径固定在 ./node_modules/.bin/，不会找不到）
          LOCAL_TOOL="./node_modules/.bin/js-deobfuscator"
          $LOCAL_TOOL "$INPUT_FILE" -o "$OUTPUT_FILE"

          # 3. 检查输出文件是否生成（确认反混淆成功）
          if [ ! -f "$OUTPUT_FILE" ]; then
            echo "❌ 错误：反混淆失败，输出文件未生成！"
            exit 1
          fi
          echo "✅ 反混淆成功！输出文件：$OUTPUT_FILE"

      # 步骤6：提交反混淆后的文件到仓库（可选，需要就保留）
      - name: 提交输出文件到仓库
        run: |
          # 配置 Git 身份（Actions 提交必须）
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # 提交输出文件（路径和步骤5的 OUTPUT_FILE 保持一致）
          git add "$OUTPUT_FILE"
          # 若没有新内容（文件未变化），不报错，直接跳过
          git commit -m "feat: 本地安装工具反混淆 JS 文件" || echo "✅ 无新内容可提交"
          # 推送到当前分支（若主分支是 master，替换为 git push origin master）
          git push origin main
